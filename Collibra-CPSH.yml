AWSTemplateFormatVersion: 2010-09-09
Description: AWS CFT v3.3 for deploying Collibra DGC node(s)
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Network Parameters"
        Parameters:
          - "VPC"
          - "Subnet"
          - "CreateNewSGName"
          - "SecurityGroup"
          - "KeyName"
          - "AllowedCidr"
          - "AllowedCidrSSH"
      - Label:
          default: "Collibra Parameters"
        Parameters:
          - "NumberOfInstances"
          - "TagName"
          - "InstanceType"
          - "DataVolumeSizeGB"
          - "KMSKey"
          - "InstallCollibraConsole"
          - "InstallDGC"
          - "InstallDQOConnect"
Parameters:
  NumberOfInstances:
    Type: Number
    Description: Number of instances to create (1-4)
    Default: 1
    AllowedValues:
      - 1
      - 2
      - 3
      - 4
  TagName:
    Type: String
    Description: "value to apply for tag:name" 
  VPC: 
    Type: AWS::EC2::VPC::Id
    Description: VPC to place instance
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet to place instance
  CreateNewSGName:
    Type: String
    Description: Will you be creating a new security group? 
    AllowedValues: 
      - true 
      - false
    Default: false  
  SecurityGroup:
    Type: String
    Default: "CollibraDG-SG"
    Description: Enter exiting SecurityGroup to use or new name if you are having one created
  KeyName:
    Type: String
    Default: ""
    Description: The name of an existing EC2 key pair to enable SSH access to the instance.
  AllowedCidr:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    Description: Allowed CIDR for the Collibra Console
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (used for Collibra Console if creating a new SG)
  AllowedCidrSSH:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (used for SSH if creating a new SG)
    Description: Allowed CIDR for SSH to the node. It is NOT recommeded to open it to 0.0.0.0/0
  InstanceType:
    Type: String
    Default: "t3.xlarge"
    AllowedValues:
      - t3.large
      - t3.xlarge 
      - c5.large
      - m5.xlarge
      - m5.4xlarge
      - m5d.4xlarge
    Description: "Choose Instance Type"
  DataVolumeSizeGB:
    Type: String
    Default: 30
    Description: "Size of /opt volume for Collibra in GB"
  KMSKey:
    Type: String
    Default: ""
    Description: Enter KMS key to use for EBS encryption or leave blank to use account default/aws managed
  InstallCollibraConsole:
    Type: String
    Description: Will this node include the Collibra Console 
    AllowedValues: 
      - true 
      - false
    Default: false
  InstallDGC:
    Type: String
    Description: Will this node include the Collibra DGC 
    AllowedValues: 
      - true 
      - false
    Default: false
  InstallDQOConnect:
    Type: String
    Description: Will DQO connect to this node 
    AllowedValues: 
      - true 
      - false
    Default: false

Mappings:
  RegionMap:
    us-east-1:
      "HVM64": ami-0583d8c7a9c35822c
    us-east-2:
      "HVM64": ami-0583d8c7a9c35822c

Conditions:
  InstallCollibraConsoleCondition: !Equals [ !Ref InstallCollibraConsole, true]
  InstallDGCCondition: !Equals [ !Ref InstallDGC, true]
  InstallDQOConnectCondition: !Equals [ !Ref InstallDQOConnect, true]
  ProvideKMSKey: !Not [!Equals [ !Ref KMSKey, ""]]
  CreateNewSG: !Equals [ !Ref CreateNewSGName, true]
  BuildSGConsoleRule: !And [!Condition CreateNewSG, !Condition InstallCollibraConsoleCondition]
  BuildSGDGCRule: !And [!Condition CreateNewSG, !Condition InstallDGCCondition]
  BuildSGDQORule: !And [!Condition CreateNewSG, !Condition InstallDQOConnectCondition]
  CreateInstance2: !Or [!Equals [!Ref NumberOfInstances, 2], !Equals [!Ref NumberOfInstances, 3], !Equals [!Ref NumberOfInstances, 4]]
  CreateInstance3: !Or [!Equals [!Ref NumberOfInstances, 3], !Equals [!Ref NumberOfInstances, 4]]
  CreateInstance4: !Equals [!Ref NumberOfInstances, 4]

Resources:

#SecurityGroup
  rSG:
    Condition: CreateNewSG
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref SecurityGroup
      GroupDescription: created by cloudformation
      VpcId: !Ref VPC

  rCollibraSSHRule:
    Condition: CreateNewSG
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt rSG.GroupId
      CidrIp: !Ref AllowedCidrSSH
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      Description: Collibra Shell

  rCollibraAllTCPSGRule:
    Condition: CreateNewSG
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt rSG.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt rSG.GroupId
      Description: Allow all TCP traffic within the security group

  rCollibraICMPRule:
    Condition: CreateNewSG
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt rSG.GroupId
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt rSG.GroupId
      Description: Allow all ICMP IPv4 traffic

  rCollibraDGRule:
    Condition: BuildSGDGCRule
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !If [CreateNewSG, !GetAtt rSG.GroupId, !Ref SecurityGroup]
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 4400
      ToPort: 4400
      Description: Collibra DGC

  rCollibraConsoleRule:
    Condition: BuildSGConsoleRule
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !If [CreateNewSG, !GetAtt rSG.GroupId, !Ref SecurityGroup]
      CidrIp: !Ref AllowedCidr
      IpProtocol: tcp
      FromPort: 4402
      ToPort: 4402
      Description: Collibra Console
  
  rCollibraDQORule:
    Condition: BuildSGDQORule
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !If [CreateNewSG, !GetAtt rSG.GroupId, !Ref SecurityGroup]
      CidrIp: !Ref AllowedCidr
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      Description: Collibra DQ

#Instance
  rInstance1:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap
        - RegionMap
        - !Ref "AWS::Region"
        - HVM64
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !If [CreateNewSG, !GetAtt rSG.GroupId, !Ref SecurityGroup]
      Tags:
        - Key: Name
          Value: !Sub "${TagName}-1"
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - 'set -e'
            - 'echo "Starting instance initialization..."'
            - 'dnf update -y'
            - 'dnf install -y lvm2 xfsprogs'
            - 'echo "Installed necessary packages"'
            - |
              # Check for root privileges
              if [ "$EUID" -ne 0 ]; then
                  echo "Please run as root"
                  exit 1
              fi

              # Check if /opt is already mounted
              if mount | grep /opt > /dev/null; then
                  echo "/opt is already mounted"
                  exit 1
              fi

              # Check if /dev/nvme1n1 exists
              if ! [ -b /dev/nvme1n1 ]; then
                  echo "/dev/nvme1n1 does not exist"
                  exit 1
              fi

              # Customize these variables according to your needs
              VG_NAME="vg01"
              ROOT_DEVICE="/dev/nvme1n1"

              # Create LVM VG
              echo "$ROOT_DEVICE exists. Creating LVM VG '$VG_NAME'..."
              vgcreate "$VG_NAME" "$ROOT_DEVICE" || { echo "Error creating LVM VG '$VG_NAME'."; exit 1; }

              # Create LVM LV 'opt' using all available space in 'vg01'
              lvcreate -n opt -l 100%FREE "$VG_NAME" || { echo "Error creating LVM LV 'opt' in '$VG_NAME'."; exit 1; }

              # Create a new XFS file system
              mkfs.xfs "/dev/$VG_NAME/opt" || { echo "Error creating XFS file system."; exit 1; }

              # Mount the new file system on /opt
              mount "/dev/$VG_NAME/opt" /opt || { echo "Failed to mount /opt"; exit 1; }

              # Add an entry to /etc/fstab to automount /opt on boot
              echo "/dev/mapper/$VG_NAME-opt /opt xfs defaults 0 0" >> /etc/fstab || { echo "Failed to update /etc/fstab"; exit 1; }

            - 'echo "Instance initialization completed successfully."'

  rDataVolume1:
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: gp3
      AvailabilityZone: !GetAtt rInstance1.AvailabilityZone
      Size: !Ref DataVolumeSizeGB
      KmsKeyId: !If [ProvideKMSKey, !Ref KMSKey, !Ref AWS::NoValue]

  rMountEBS1:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref rInstance1
      VolumeId: !Ref rDataVolume1
      Device: /dev/sdf

  rInstance2:
    Condition: CreateInstance2
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap
        - RegionMap
        - !Ref "AWS::Region"
        - HVM64
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !If [CreateNewSG, !GetAtt rSG.GroupId, !Ref SecurityGroup]
      Tags:
        - Key: Name
          Value: !Sub "${TagName}-2"
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - 'set -e'
            - 'echo "Starting instance initialization..."'
            - 'dnf update -y'
            - 'dnf install -y lvm2 xfsprogs'
            - 'echo "Installed necessary packages"'
            - |
              # Check for root privileges
              if [ "$EUID" -ne 0 ]; then
                  echo "Please run as root"
                  exit 1
              fi

              # Check if /opt is already mounted
              if mount | grep /opt > /dev/null; then
                  echo "/opt is already mounted"
                  exit 1
              fi

              # Check if /dev/nvme1n1 exists
              if ! [ -b /dev/nvme1n1 ]; then
                  echo "/dev/nvme1n1 does not exist"
                  exit 1
              fi

              # Customize these variables according to your needs
              VG_NAME="vg01"
              ROOT_DEVICE="/dev/nvme1n1"

              # Create LVM VG
              echo "$ROOT_DEVICE exists. Creating LVM VG '$VG_NAME'..."
              vgcreate "$VG_NAME" "$ROOT_DEVICE" || { echo "Error creating LVM VG '$VG_NAME'."; exit 1; }

              # Create LVM LV 'opt' using all available space in 'vg01'
              lvcreate -n opt -l 100%FREE "$VG_NAME" || { echo "Error creating LVM LV 'opt' in '$VG_NAME'."; exit 1; }

              # Create a new XFS file system
              mkfs.xfs "/dev/$VG_NAME/opt" || { echo "Error creating XFS file system."; exit 1; }

              # Mount the new file system on /opt
              mount "/dev/$VG_NAME/opt" /opt || { echo "Failed to mount /opt"; exit 1; }

              # Add an entry to /etc/fstab to automount /opt on boot
              echo "/dev/mapper/$VG_NAME-opt /opt xfs defaults 0 0" >> /etc/fstab || { echo "Failed to update /etc/fstab"; exit 1; }

            - 'echo "Instance initialization completed successfully."'

  rDataVolume2:
    Condition: CreateInstance2
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: gp3
      AvailabilityZone: !GetAtt rInstance2.AvailabilityZone
      Size: !Ref DataVolumeSizeGB
      KmsKeyId: !If [ProvideKMSKey, !Ref KMSKey, !Ref AWS::NoValue]

  rMountEBS2:
    Condition: CreateInstance2
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref rInstance2
      VolumeId: !Ref rDataVolume2
      Device: /dev/sdf

  rInstance3:
    Condition: CreateInstance3
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap
        - RegionMap
        - !Ref "AWS::Region"
        - HVM64
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !If [CreateNewSG, !GetAtt rSG.GroupId, !Ref SecurityGroup]
      Tags:
        - Key: Name
          Value: !Sub "${TagName}-3"
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - 'set -e'
            - 'echo "Starting instance initialization..."'
            - 'dnf update -y'
            - 'dnf install -y lvm2 xfsprogs'
            - 'echo "Installed necessary packages"'
            - |
              # Check for root privileges
              if [ "$EUID" -ne 0 ]; then
                  echo "Please run as root"
                  exit 1
              fi

              # Check if /opt is already mounted
              if mount | grep /opt > /dev/null; then
                  echo "/opt is already mounted"
                  exit 1
              fi

              # Check if /dev/nvme1n1 exists
              if ! [ -b /dev/nvme1n1 ]; then
                  echo "/dev/nvme1n1 does not exist"
                  exit 1
              fi

              # Customize these variables according to your needs
              VG_NAME="vg01"
              ROOT_DEVICE="/dev/nvme1n1"

              # Create LVM VG
              echo "$ROOT_DEVICE exists. Creating LVM VG '$VG_NAME'..."
              vgcreate "$VG_NAME" "$ROOT_DEVICE" || { echo "Error creating LVM VG '$VG_NAME'."; exit 1; }

              # Create LVM LV 'opt' using all available space in 'vg01'
              lvcreate -n opt -l 100%FREE "$VG_NAME" || { echo "Error creating LVM LV 'opt' in '$VG_NAME'."; exit 1; }

              # Create a new XFS file system
              mkfs.xfs "/dev/$VG_NAME/opt" || { echo "Error creating XFS file system."; exit 1; }

              # Mount the new file system on /opt
              mount "/dev/$VG_NAME/opt" /opt || { echo "Failed to mount /opt"; exit 1; }

              # Add an entry to /etc/fstab to automount /opt on boot
              echo "/dev/mapper/$VG_NAME-opt /opt xfs defaults 0 0" >> /etc/fstab || { echo "Failed to update /etc/fstab"; exit 1; }

            - 'echo "Instance initialization completed successfully."'
  
  rDataVolume3:
    Condition: CreateInstance3
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: gp3
      AvailabilityZone: !GetAtt rInstance3.AvailabilityZone
      Size: !Ref DataVolumeSizeGB
      KmsKeyId: !If [ProvideKMSKey, !Ref KMSKey, !Ref AWS::NoValue]

  rMountEBS3:
    Condition: CreateInstance3
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref rInstance3
      VolumeId: !Ref rDataVolume3
      Device: /dev/sdf

  rInstance4:
    Condition: CreateInstance4
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap
        - RegionMap
        - !Ref "AWS::Region"
        - HVM64
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !If [CreateNewSG, !GetAtt rSG.GroupId, !Ref SecurityGroup]
      Tags:
        - Key: Name
          Value: !Sub "${TagName}-4"
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - 'set -e'
            - 'echo "Starting instance initialization..."'
            - 'dnf update -y'
            - 'dnf install -y lvm2 xfsprogs'
            - 'echo "Installed necessary packages"'
            - |
              # Check for root privileges
              if [ "$EUID" -ne 0 ]; then
                  echo "Please run as root"
                  exit 1
              fi

              # Check if /opt is already mounted
              if mount | grep /opt > /dev/null; then
                  echo "/opt is already mounted"
                  exit 1
              fi

              # Check if /dev/nvme1n1 exists
              if ! [ -b /dev/nvme1n1 ]; then
                  echo "/dev/nvme1n1 does not exist"
                  exit 1
              fi

              # Customize these variables according to your needs
              VG_NAME="vg01"
              ROOT_DEVICE="/dev/nvme1n1"

              # Create LVM VG
              echo "$ROOT_DEVICE exists. Creating LVM VG '$VG_NAME'..."
              vgcreate "$VG_NAME" "$ROOT_DEVICE" || { echo "Error creating LVM VG '$VG_NAME'."; exit 1; }

              # Create LVM LV 'opt' using all available space in 'vg01'
              lvcreate -n opt -l 100%FREE "$VG_NAME" || { echo "Error creating LVM LV 'opt' in '$VG_NAME'."; exit 1; }

              # Create a new XFS file system
              mkfs.xfs "/dev/$VG_NAME/opt" || { echo "Error creating XFS file system."; exit 1; }

              # Mount the new file system on /opt
              mount "/dev/$VG_NAME/opt" /opt || { echo "Failed to mount /opt"; exit 1; }

              # Add an entry to /etc/fstab to automount /opt on boot
              echo "/dev/mapper/$VG_NAME-opt /opt xfs defaults 0 0" >> /etc/fstab || { echo "Failed to update /etc/fstab"; exit 1; }

            - 'echo "Instance initialization completed successfully."'

  rDataVolume4:
    Condition: CreateInstance4
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: gp3
      AvailabilityZone: !GetAtt rInstance4.AvailabilityZone
      Size: !Ref DataVolumeSizeGB
      KmsKeyId: !If [ProvideKMSKey, !Ref KMSKey, !Ref AWS::NoValue]

  rMountEBS4:
    Condition: CreateInstance4
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref rInstance4
      VolumeId: !Ref rDataVolume4
      Device: /dev/sdf
  